Architecture pattern follow

java: Push notification:

..>> launch mode. Handler,Looper,AsyncTask
..SErializable.parcelable
change color of one activity.. from another activity
signletone class
rxJava , RxAndroid
Layout Inflator
ANR
Lat,Long
GMap
more than one manifest
mutliple view in recylcerView
Context;

Data Binding: It helps in declaratively binding UI elements to in our layout to data sources of our app.

Lifecycles: It manages activity and fragment lifecycles of our app, survives configuration changes, avoids memory leaks and easily loads data into our UI.

LiveData: It notifies views of any database changes. Use LiveData to build data objects that notify views when the underlying database changes.

Navigation: It handles everything needed for in-app navigation in Android application.

Paging: It helps in gradually loading information on demand from our data source.

Room: It is a SQLite object mapping library. Use it to Avoid boilerplate code and easily convert SQLite table data to Java objects. Room provides compile time checks of SQLite statements and can return RxJava, Flowable and LiveData observables.

ViewModel: It manages UI-related data in a lifecycle-conscious way. It stores UI-related data that isn't destroyed on app rotations.

WorkManager: It manages every background jobs in Android with the circumstances we choose.